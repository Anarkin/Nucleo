using Microsoft.CodeAnalysis;
using Nucleo.Generators.Abstractions;

namespace Nucleo.Generators;

[Generator]
internal class Gyurma : ISourceGenerator
{
	public void Execute(GeneratorExecutionContext context)
	{
		var assemblySymbol = context.Compilation.SourceModule.ContainingAssembly;
		var namespaceSymbol = assemblySymbol.Identity.Name.Split('.').Aggregate(assemblySymbol.GlobalNamespace, (nss, str) => nss.GetNamespaceMembers().Single(_ => _.Name.Equals(str)));
		var typeSymbols = GetAllTypes(namespaceSymbol);
		foreach (var typeSymbolWithAttribute in typeSymbols.Where(ts => ts.TypeKind == TypeKind.Class && ts.GetAttributes().Any(ad => ad.AttributeClass?.Name == nameof(GyurmaAttribute))))
		{
			foreach (var attribute in typeSymbolWithAttribute.GetAttributes().Where(attribute => attribute.AttributeClass?.Name == nameof(GyurmaAttribute)))
			{
				foreach (var alma in attribute.ConstructorArguments[0].Values)
				{
					var type = (INamedTypeSymbol)alma.Value;
					var typeSymbol = context.Compilation.GetTypeByMetadataName(type.ToString());
					var typeSymbolMembers = typeSymbol.GetMembers();
					
					//foreach (var typeSymbolMember in typeSymbolMembers)
					//{
					//	var xxx = typeSymbolMember as Microsoft.CodeAnalysis.IMethodSymbol;
					//	var aésdlklaé = xxx.ReturnType;
					//}
				}
			}
		}

//		var namespaceName = context.Compilation.Assembly.Name;
//		var className = "Lófasz";
//		var fileName = $"{className}.g.cs";

			//		var source =
			//$@"// <auto-generated />

			//using System;

			//namespace {namespaceName};

			//public class {className}
			//{{
			//}}
			//";

			//		context.AddSource(fileName, source);

			//		context.AddSource("_fw.g.cs",
			//$@"
			//namespace {namespaceName};

			//public class MockAttribute: Attribute
			//{{

			//}}
			//");
	}

	public void Initialize(GeneratorInitializationContext context)
	{
	}

	private static IEnumerable<ITypeSymbol> GetAllTypes(INamespaceSymbol namespaceSymbol)
	{
		foreach (var namespaceOrTypeSymbol in namespaceSymbol.GetMembers())
		{
			if (namespaceOrTypeSymbol is INamespaceSymbol nss)
			{
				foreach (var nested in GetAllTypes(nss))
				{
					yield return nested;
				}
			}
			else if (namespaceOrTypeSymbol is ITypeSymbol type)
			{
				yield return type;
			}
		}
	}
}
